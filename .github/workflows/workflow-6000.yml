name: Java CICD
'on':
  push:
    branches:
     - main
  workflow_dispatch: {
    }
# x_name: 워크플로우 기본 설정
# x_description: GitHub Actions 워크플로우 이름과 트리거 조건을 설정하는 블록입니다.
jobs:
  build:
    runs-on: ubuntu-latest
#     x_name: Job 설정 (Build & Test)
#     x_description: 소스 체크아웃, JDK 설정, Gradle 빌드/테스트
    steps:
     -
      name: Checkout repository
      uses: actions/checkout@v4
#       x_name: Checkout repository
#       x_description: GitHub 저장소를 체크아웃하는 단계입니다.
#       x_domain: github
#       x_task:
#        - checkout
     -
      name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: adopt
        java-version: '21'
#       x_name: Set up JDK 21
#       x_description: GitHub Actions 실행 환경에 AdoptOpenJDK 21을 설치하는 단계입니다.
#       x_domain: java
#       x_task:
#        - setup
     -
      run: |-
        chmod +x ./gradlew
        ./gradlew clean build -x test
      name: Gradle Build (no test)
#       x_name: Gradle 빌드 블록
#       x_description: Gradle Wrapper에 권한을 부여하고, 테스트를 제외한 빌드만 수행합니다.
#       x_domain: gradle
#       x_task:
#        - build
     -
      run: ./gradlew test
      name: Test with Gradle
#       x_name: Gradle 테스트 실행 블록
#       x_description: Gradle을 사용하여 테스트를 수행하는 블록입니다.
#       x_domain: gradle
#       x_task:
#        - test
  docker:
    needs:
     - build
    runs-on: ubuntu-latest
#     x_name: Job 설정 (Docker Build & Push)
#     x_description: Docker 로그인 및 이미지 빌드/푸시
    steps:
     -
      name: Docker Login
      uses: docker/login-action@v2.2.0
      with:
        password: ${{ secrets.DOCKER_PASSWORD }}
        username: ${{ secrets.DOCKER_USERNAME }}
#       x_name: Docker 로그인
#       x_description: Docker Hub에 로그인하여 이후 이미지 푸시에 권한을 부여합니다.
#       x_domain: docker
#       x_task:
#        - login
     -
      name: image build and push docker images
      uses: docker/build-push-action@v4.1.1
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/bus-notice-v2:latest
        context: .
        no-cache: true
#       x_name: Docker 이미지 빌드 및 푸시 블록
#       x_description: Docker 이미지를 빌드하고 Docker Hub에 푸시하는 단계입니다.
#       x_domain: docker
#       x_task:
#        - build
#        - push
  deploy:
    needs:
     - docker
    runs-on: ubuntu-latest
#     x_name: Job 설정 (Deploy)
#     x_description: EC2 원격 배포
    steps:
     -
      uses: appleboy/ssh-action@v0.1.10
      with:
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
        host: ${{ secrets.AWS_HOST_IP }}
        port: ${{ secrets.REMOTE_SSH_PORT }}
        script: |-
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/bus-notice-v2:latest
          docker stop bus-notice-v2 || true
          docker rm $(docker ps --filter 'status=exited' -a -q) || true
          docker run -d --name bus-notice-v2 --log-driver=syslog --network bus-notice -p 8081:8080 --label co.elastic.logs/enabled=true --label co.elastic.logs/module=java ${{ secrets.DOCKER_USERNAME }}/bus-notice-v2:latest
        username: ${{ secrets.REMOTE_USER }}
#       x_name: Deploy to AWS EC2
#       x_description: Docker 이미지를 EC2 서버에 배포하는 단계입니다.
#       x_domain: aws
#       x_task:
#        - deploy
# 
